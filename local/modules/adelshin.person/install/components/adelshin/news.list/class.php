<?
if(!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED!==true) die();
/**
 * Базовый компонент для списков
 * version 1.0.1
 * Created by PhpStorm.
 * User: Abai Adelshin
 * www.orendev.ru
 * Date: 01.02.2016
 * Time: 11:15
 * Базовый класс компонента для формирования списков (news.list)
 * По умолчанию формирует независимый блок новостной карусели
 * Необходимо подключить фреймворк bootstrap и jquery
 *
 * Доработать - Сформировать таблицу стилей
 * Доработать Проверка условия подключения фреймворка bootstrap
 *
 */
CBitrixComponent::includeComponentClass("itmanagement:base.component");
class newsClass extends TBaseComponent
{
    const COUNT_ITEM_PAGE_DEFAULT = 4;//количество элементов в одном блоке по умолчанию
    protected $showError;
    protected $countPage = 4;

    protected $elementArSelect = array(
        'IBLOCK_ID',
        'ID',
        'NAME',
        'ACTIVE_FROM',
        'PREVIEW_PICTURE',
        'DETAIL_PICTURE',
        'CODE',
        'DETAIL_PAGE_URL',
        'LIST_PAGE_URL');

    /**
     * @param $arParams
     * @return mixed
     * @throws Exception
     * Обработка массива $arParams
     */
    public function onPrepareComponentParams($arParams)
    {
        parent::onPrepareComponentParams($arParams); // TODO: Change the autogenerated stub
        $arParams['IBLOCK_ID'] = intval($arParams['IBLOCK_ID']);
        $arParams['COUNT_ITEM_PAGE'] = isset($arParams['COUNT_ITEM_PAGE']) ? intval($arParams['COUNT_ITEM_ELEMENT']) : self::COUNT_ITEM_PAGE_DEFAULT;
        $arParams['COUNT_ITEM'] = intval($arParams['COUNT_ITEM']);
        $arParams["WIDTH_PICTURE_SMALL"] = intval($arParams["WIDTH_PICTURE_SMALL"]);
        $arParams["HEIGHT_PICTURE_SMALL"] = intval($arParams["HEIGHT_PICTURE_SMALL"]);

        if (!$arParams['IBLOCK_ID'])
        {
            throw new Exception('Параметры заданы не верно');
        }

        return $arParams;
    }

    /**
     * @throws Exception
     * Основная функция обработки данных, реализуем логику запроса и формирования конечного массива $arResult
     */
    public function inCacheFunction()
    {
        $arSizeSmail = [
            'WIDTH_PICTURE_SMALL' => $this -> arParams['WIDTH_PICTURE_SMALL'],
            'HEIGHT_PICTURE_SMALL' => $this -> arParams['HEIGHT_PICTURE_SMALL'],
        ];
        $arFilter = [
            'IBLOCK_ID' => $this->arParams['IBLOCK_ID'],
            'ACTIVE' => 'Y',
            '!DETAIL_PICTURE' => false,//выводим только элементы у которых установлно значение
        ];

        $this->arResult['elements'] = $this->getArElements(
            $this -> elementsSortDefault,
            $arFilter,
            $arGroupBy = false,
            $arNavStartParams = ['nTopCount' => $this -> arParams['COUNT_ITEM']],
            $this -> elementArSelect,
            $getProp = false,
            $navString = false
        );
        $this -> arResult = $this -> handlerAnResizeImg($this->arResult, $arSizeSmail);
        $this -> arResult['elements'] = $this->handlerAnArrayChunk($this->arResult, $this->countPage);
    }

    // Вспомогательные функции для наследуемых компонентов
    /**
     * @param $arResult
     * @param $countPage
     * @param bool $isChunck
     * @return mixed
     * Разбиваеем масив на части $countPage
     */
    protected function handlerAnArrayChunk($arResult, $countPage, $isChunck = true){
        $arChunk['items'] = array_chunk($arResult['elements'], $countPage, $isChunck);
        return $arChunk;
    }
    protected function handlerAnResizeImg($arResult, $arSizeSmail){
        foreach ($arResult['elements'] as $key => $arItem)
        {
            if (!empty($arItem['DETAIL_PICTURE']))
            {
                $arFileTmp = CFile::ResizeImageGet(
                    $arItem['DETAIL_PICTURE'],
                    [
                        'width' => $arSizeSmail['WIDTH_PICTURE_SMALL'],
                        'height' => $arSizeSmail['HEIGHT_PICTURE_SMALL']
                    ],
                    BX_RESIZE_IMAGE_EXACT,
                    false
                );
                $arSize = getimagesize($_SERVER['DOCUMENT_ROOT'].$arFileTmp['src']);
                $arResult['elements'][$key]['SMALL_PICTURE'] = [
                    'SRC' => $arFileTmp['src'],
                    'WIDTH' => IntVal($arSize[0]),
                    'HEIGHT' => IntVal($arSize[1]),
                    'TITLE' => $arItem['DETAIL_PICTURE']['TITLE'],
                    'ALT' => $arItem['DETAIL_PICTURE']['ALT']
                ];
            }
            else
            {
                $arResult['elements'][$key]['SMALL_PICTURE'] = array(
                    'SRC' => 'http://placehold.it/360x240',
                    'ALT' => 'placehold'
                );
            }
        }
        return $arResult;
    }
}